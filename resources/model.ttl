@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ex: <http://example.com/ns#> .
@prefix dqv: <http://www.w3.org/ns/dqv#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix daq: <http://purl.org/eis/vocab/daq#>.
@prefix prov: <http://www.w3.org/ns/prov#>.

# Representing quality dimensions.
ex:mappingConsistency a dqv:Dimension ;
                    dqv:inCategory ex:intrinsicCategory;
                    skos:prefLabel "Mapping Consistency"@en;
                    skos:definition "Mapping Consistency refers to the extent to which a mapping is conformant to its mapping consistency language."@en
.

# Representing quality categories.
ex:intrinsicCategory a dqv:Category ;
                     skos:prefLabel "Intrinsic category"@en;
                     skos:definition "Intrinsic category groups dimensions related to the corrrectness, consistency and conciseness."@en;
                     daq:hasDimension ex:dataConsistency, ex:mappingConsistency, ex:RDFtermCorrectness
.

# Representing quality metrics, which are also SHACL shapes.
# This is the metrics for validating the predicate(Object)map termType is an rr:IRI
ex:predicateShape a dqv:Metric, sh:NodeShape, prov:Entity;
                  skos:definition "Validating term type used in a predicate map is correct."@en ;
                  dqv:expectedDataType xsd:boolean;
                  dqv:inDimension ex:mappingConsistency;
                  sh:targetObjectsOf rr:predicateMap, rr:predicateObjectMap ;
                  sh:property ex:predicateShapeProperty;
                  prov:used ex:shapesDoc
.

# Representing the shapes file.
ex:shapesDoc a prov:Entity;
          prov:atLocation <file://Users/shapes.ttl>;
.

<file://Users/shapes.ttl> a prov:Location
.

# Properties of this SHACL shape. 
ex:predicateShapeProperty
				  sh:message "rr:termType on predicate map should be rr:IRI." ;
				  sh:path rr:termType ;
				  sh:in ( rr:IRI ) ;
.

# Representing different violation types i.e mapping, data and vocabulary.
ex:mappingQualityViolationType a prov:Collection;
                               prov:hadMember ex:predicateShape;
#       This collection will include all mapping quality violations once completed, we can then add a collection for data and vocabulary violations.
.

# Representing the mapping file.
ex:mapDoc a prov:Entity;
          prov:atLocation <file://Users/mapping.ttl>;
.

<file://Users/mapping.ttl> a prov:Location
.

# Representing the quality assessment framework.
ex:SHACLengine
    a prov:SoftwareAgent ;
    rdfs:label "Mapping quality assessment and refinement framework."^^xsd:string;
#    Other information about the quality assessment framework.
.

# Should we include provenance about who is running the test? e.g prov:Person

# Representing the quality assessment process.
ex:qualityAssessment
    a prov:Activity;
    rdfs:label "Assessing mapping document."^^xsd:string;
    prov:wasAssociatedWith ex:SHACLengine ;
    prov:used              ex:mapDoc, ex:shapesDoc;
    prov:generated         ex:validationReport;
#   Should prov:generated be linked to individual violations or the entire validation report?
    prov:endedAtTime      "2020-04-21T02:52:02Z"^^xsd:dateTime;
    prov:startedAtTime     "2020-04-21T00:52:02Z"^^xsd:dateTime
.



# Representing the SHACL validation report.
ex:validationReport a       sh:validationReport, prov:Entity ;
     prov:wasGeneratedBy ex:qualityAssessment;
     sh:conforms false ;
     sh:result ex:violation;
#    sh:result will be linked to all violations created.
     prov:atLocation <file://Users/validationReport.ttl>;
.

<file://Users/validationReport.ttl> a prov:Location .

# Representing the violations within the report.
ex:violation a      sh:ValidationResult, prov:Entity ;
              sh:focusNode []  ;
              sh:resultMessage "rr:termType on predicate map should be rr:IRI." ;
              sh:resultPath rr:termType ;
              sh:resultSeverity sh:Violation ;
              sh:sourceConstraintComponent sh:InConstraintComponent ;
              sh:sourceShape ex:predicateShape  ;
              sh:value rr:Literal
.

# Calculating confidence score for refinement .
ex:confidenceScore
    a dqv:QualityMeasurement , prov:Entity;
    prov:wasAttributedTo ex:SHACLengine;
    dqv:computedOn ex:mapDoc, ex:refinement;
    dqv:isMeasurementOf ex:confidenceScoreMetric ;
    dqv:value "0.8"^^xsd:double
.

# The metric used to calculate the confidence score.
ex:confidenceScoreMetric
    a dqv:Metric ;
    skos:definition "A confidence score for how successful a refinement will be."@en ;
    dqv:expectedDataType xsd:double ;
.

# The suggested refinements.
ex:refinement  a prov:Activity;
                prov:used ex:mapDoc, ex:violation, ex:SPARQLquery;
                prov:wasInfluencedBy ex:confidenceScore
.

# The location of theex:SPARQLquery1;
ex:SPARQLquery a prov:Entity;
                prov:atLocation <file://Users/query1.rq>;
.

<file://Users/query1.rq> a prov:Location .

ex:refinedMapDoc a prov:Entity;
                  prov:wasGeneratedBy ex:refinement ;
                  prov:wasDerivedFrom ex:mapDoc;
                  prov:atLocation <file://Users/refinedMapping.ttl>
.

<file://Users/refinedMapping.ttl> a prov:Location .


